[{"/Users/a/liar/src/index.js":"1","/Users/a/liar/src/App.js":"2","/Users/a/liar/src/reportWebVitals.js":"3","/Users/a/liar/src/components/Home.js":"4","/Users/a/liar/src/components/Enter-username.js":"5","/Users/a/liar/src/components/Instructions.js":"6","/Users/a/liar/src/components/Acknowledgements.js":"7","/Users/a/liar/src/components/Room.js":"8","/Users/a/liar/src/firebase.js":"9"},{"size":500,"mtime":1611955116777,"results":"10","hashOfConfig":"11"},{"size":1036,"mtime":1611955116775,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1611955116778,"results":"13","hashOfConfig":"11"},{"size":1399,"mtime":1611955116776,"results":"14","hashOfConfig":"11"},{"size":1678,"mtime":1611955116776,"results":"15","hashOfConfig":"11"},{"size":1057,"mtime":1611955116776,"results":"16","hashOfConfig":"11"},{"size":1541,"mtime":1611955116776,"results":"17","hashOfConfig":"11"},{"size":7014,"mtime":1611955116777,"results":"18","hashOfConfig":"11"},{"size":510,"mtime":1611955447034,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1cfr6zr",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"22"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/a/liar/src/index.js",[],["42","43"],"/Users/a/liar/src/App.js",["44"],"import React, { Component } from 'react'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\n\nimport Home from './components/Home'\nimport Instructions from './components/Instructions'\nimport Acknowledgements from './components/Acknowledgements'\nimport EnterUsername from './components/Enter-username'\nimport Room from './components/Room'\nimport './components/Components.css'\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/\" render={ props => <Home {...props} />} />\n        <Route exact path=\"/instructions\" render={ props => <Instructions {...props} />} />\n        <Route exact path=\"/acknowledgements\" render={ props => <Acknowledgements {...props} />} />\n        <Route exact path=\"/enter\" render={ props => <EnterUsername {...props} />} />\n        <Route exact path=\"/enter/:id\" render={ props => <EnterUsername {...props} />} />\n        <Route exact path=\"/room/:id\" render={ props => <Room {...props} />} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","/Users/a/liar/src/reportWebVitals.js",[],"/Users/a/liar/src/components/Home.js",[],"/Users/a/liar/src/components/Enter-username.js",["45","46"],"import React from 'react'\nimport { Link, useHistory } from 'react-router-dom'\nimport firebase from '../firebase.js'\nvar rand = require('randomstring')\n\nfunction EnterUsername() {\n    const hist = useHistory()\n    function Submit() {\n        const url = window.location.pathname\n        const games = firebase.database().ref('games')\n        const name = document.getElementById('username').value\n        // If URL doesn't have id, create room\n        if (url.length == 6) {\n            const id = rand.generate(7)\n            const wordset = {\n                category: \"\",\n                word: \"\"\n            }\n            const game = {\n                liar: \"\",\n                players: [\n                    name\n                ],\n                stage: 0,\n                wordset: wordset\n            }\n            games.child(id).set(game)\n            hist.replace('/room/' + id + '&name=' + name)\n        }\n        // If URL has id, join existing room\n        else {\n            const id = url.substring(7, 14)\n            const player = document.getElementById('username').value\n            games.child(id).child('players').push(player)\n            hist.replace('/room/' + id + '&name=' + name)\n        }\n    }\n\n    return (\n        <div className='container'>\n            <label className='usernameLabel' htmlFor='username'>username:</label> {/*check for uniqueness, or just add a number to the end if not unique*/}\n            <input className='usernameInput' type='text' id='username' />\n            <button className='block' onClick={Submit} style={{ marginLeft: 'auto', marginRight: 'auto' }}>enter</button>\n        </div>\n    );\n}\n\nexport default EnterUsername;\n","/Users/a/liar/src/components/Instructions.js",[],"/Users/a/liar/src/components/Acknowledgements.js",[],"/Users/a/liar/src/components/Room.js",["47","48","49","50","51","52"],"import React from 'react'\nimport firebase from '../firebase.js'\nvar game\n\n// Create wordsets\nvar wordsets = []\n\nconst food = ['apple', 'pear', 'orange', 'lemon', 'peach', 'persimmon', 'raspberries', 'blackberries', 'blueberries', 'strawberries',\n    'grapes', 'bread', 'rice', 'spaghetti', 'noodles', 'egg', 'fish', 'steak', 'pork', 'chicken', 'cabbage', 'broccoli',\n    'lettuce', 'spinach', 'celery', 'carrot', 'tomato', 'potato', 'onion', 'okra', 'garlic', 'ginger', 'cilantro', 'bell pepper',\n    'eggplant', 'bok choy', 'brussel sprouts', 'cucumber', 'zucchini', 'squash', 'maize', 'corn', 'chocolate', 'lollipop', 'gum']\nconst wear = ['hat', 'baseball cap', 'glasses', 'sunglasses', 'scarf', 'T-shirt', 'sweater', 'sweatshirt', 'hoodie', 'jacket', 'coat',\n    'cardigan', 'shorts', 'pants', 'jeans', 'skirt', 'dress', 'gloves', 'mittens', 'socks', 'shoes']\nconst transportation = ['walking', 'bike', 'car', 'subway', 'train', 'plane', 'horse', 'skateboard', 'rollerskates', 'road', 'sidewalk',\n    'bridge', 'railroad', 'bike lane', 'highway', 'boat', 'ferry']\nconst place = ['home', 'grocery store', 'school', 'library', 'hospital', 'subway station', 'train station', 'airport', 'work', 'restaurant',\n    'park', 'forest', 'desert', 'mountain', 'river']\nconst anatomy = ['brain', 'head', 'face', 'hair', 'eyebrows', 'eyelashes', 'eyes', 'nose', 'lips', 'teeth', 'tongue', 'ears', 'chin',\n    'forehead', 'neck', 'shoulder', 'arm', 'bicep', 'elbow', 'wrist', 'hand', 'finger', 'thumb', 'pinky', 'middle finger',\n    'index finger', 'ring finger', 'fingernails', 'lungs', 'heart', 'stomach', 'intestines', 'kidneys', 'leg', 'knee', 'ankle',\n    'foot', 'toenail']\nconst bug = ['caterpillar', 'butterfly', 'moth', 'cockroach', 'spider', 'ant', 'centipede', 'millipede', 'ladybug', 'grasshopper',\n    'bee', 'wasp', 'hornet', 'fly', 'fruit fly', 'segfault']\n\nfor (let i = 0; i < food.length; i++) {\n    wordsets.push(['food', food[i]])\n}\nfor (let i = 1; i < wear.length; i++) {\n    wordsets.push(['things people wear', wear[i]])\n}\nfor (let i = 1; i < transportation.length; i++) {\n    wordsets.push(['transportation', transportation[i]])\n}\nfor (let i = 1; i < place.length; i++) {\n    wordsets.push(['place', place[i]])\n}\nfor (let i = 1; i < anatomy.length; i++) {\n    wordsets.push(['anatomy', anatomy[i]])\n}\nfor (let i = 1; i < bug.length; i++) {\n    wordsets.push(['bug', bug[i]])\n}\n\nclass Room extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            players: [],\n            stage: 0,\n            category: \"\",\n            word: \"\",\n            liar: \"\"\n        }\n        this.updateStage = this.updateStage.bind(this)\n    }\n\n    updateStage() {\n        game.child('stage').once('value', stage => {\n            game.update({ 'stage': (stage.val() + 1) % 3 })\n        })\n    }\n\n    // Based off https://css-tricks.com/building-a-real-time-chat-app-with-react-and-firebase/\n    async componentDidMount() {\n        const id = window.location.pathname.substring(6, 13)\n        game = firebase.database().ref('games').child(id)\n        const players = game.child('players')\n        players.on('child_added', player => {\n            let updatedPlayers = this.state.players\n            updatedPlayers.push(player.val())\n            this.setState({\n                players: updatedPlayers\n            })\n        });\n        const stage = game.child('stage')\n        stage.on('value', stage => {\n            this.setState({\n                stage: stage.val()\n            })\n            if (stage.val() == 0) {\n                // Determine wordset for current round\n                let wordsetTemp = wordsets[Math.floor(Math.random() * wordsets.length)]\n                let wordset = {\n                    category: wordsetTemp[0],\n                    word: wordsetTemp[1]\n                }\n                game.update({ 'wordset': wordset })\n                // Determine liar for current round\n                let liar = this.state.players[Math.floor(Math.random() * this.state.players.length)]\n                game.update({ 'liar': liar })\n            }\n        })\n        const wordset = game.child('wordset')\n        wordset.on('value', wordset => {\n            this.setState({\n                category: wordset.child('category').val(),\n                word: wordset.child('word').val()\n            })\n        })\n        const liar = game.child('liar')\n        liar.on('value', liar => {\n            this.setState({\n                liar: liar.val()\n            })\n        })\n    }\n\n    render() {\n        return (\n            <div className='gameScreen'>\n                <div className='gameScreenLeft'>\n                    <p className='playersLabel'>\n                        players:\n                    </p>\n                    <div className='playersList'>\n                        {this.state.players.map((player) =>\n                            <li key={player}>{player}</li>\n                        )}\n                    </div>\n                </div>\n                <div className='gameScreenRight'>\n                    {this.state.stage == 0 && // Waiting room\n                        <div>\n                            <p className='linkLabel'>send your friends this link:</p>\n                            <p className='link'>{'liar-ga.me' + window.location.pathname.replace('room', 'enter').substring(0, 14)}</p>\n                            <button className='block' onClick={this.updateStage} style={{ marginTop: '20px', marginLeft: 'auto', marginRight: 'auto' }}>start</button>\n                        </div>\n                    }\n                    {this.state.stage == 1 && // Game started\n                        <div>\n                            <div className='promptLabel'>\n                                category is {this.state.category}<br />\n                                {window.location.pathname.substring(19) != this.state.liar &&\n                                    <div>word is {this.state.word}</div>\n                                }\n                                {window.location.pathname.substring(19) == this.state.liar &&\n                                    <div>you are the liar</div>\n                                }\n                            </div>\n                            <button className='block' onClick={this.updateStage} style={{ marginTop: '20px', marginLeft: 'auto', marginRight: 'auto' }}>end</button>\n                        </div>\n                    }\n                    {this.state.stage == 2 && // Game ended\n                        <div>\n                            <div className='liarLabel'>\n                                {this.state.liar} was the liar!\n                            </div>\n                            <button className='block' onClick={this.updateStage} style={{ marginTop: '20px', marginLeft: 'auto', marginRight: 'auto' }}>play again</button>\n                        </div>\n                    }\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Room;\n","/Users/a/liar/src/firebase.js",[],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":1,"column":17,"nodeType":"59","messageId":"60","endLine":1,"endColumn":26},{"ruleId":"57","severity":1,"message":"61","line":2,"column":10,"nodeType":"59","messageId":"60","endLine":2,"endColumn":14},{"ruleId":"62","severity":1,"message":"63","line":13,"column":24,"nodeType":"64","messageId":"65","endLine":13,"endColumn":26},{"ruleId":"62","severity":1,"message":"63","line":80,"column":29,"nodeType":"64","messageId":"65","endLine":80,"endColumn":31},{"ruleId":"62","severity":1,"message":"63","line":122,"column":39,"nodeType":"64","messageId":"65","endLine":122,"endColumn":41},{"ruleId":"62","severity":1,"message":"63","line":129,"column":39,"nodeType":"64","messageId":"65","endLine":129,"endColumn":41},{"ruleId":"62","severity":1,"message":"66","line":133,"column":73,"nodeType":"64","messageId":"65","endLine":133,"endColumn":75},{"ruleId":"62","severity":1,"message":"63","line":136,"column":73,"nodeType":"64","messageId":"65","endLine":136,"endColumn":75},{"ruleId":"62","severity":1,"message":"63","line":143,"column":39,"nodeType":"64","messageId":"65","endLine":143,"endColumn":41},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation"]